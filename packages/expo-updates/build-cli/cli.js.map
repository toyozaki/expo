{"version":3,"file":"cli.js","sourceRoot":"","sources":["../cli/cli.ts"],"names":[],"mappings":";AACA,OAAO,GAAG,MAAM,KAAK,CAAC;AACtB,OAAO,KAAK,MAAM,OAAO,CAAC;AAI1B,MAAM,QAAQ,GAAkD;IAC9D,yBAAyB;IACzB,mBAAmB,EAAE,GAAG,EAAE,CACxB,MAAM,CAAC,uBAAuB,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,wBAAwB,CAAC;CAC1E,CAAC;AAEF,MAAM,IAAI,GAAG,GAAG,CACd;IACE,QAAQ;IACR,WAAW,EAAE,OAAO;IACpB,QAAQ,EAAE,OAAO;IAEjB,UAAU;IACV,IAAI,EAAE,WAAW;IACjB,IAAI,EAAE,QAAQ;CACf,EACD;IACE,UAAU,EAAE,IAAI;CACjB,CACF,CAAC;AAEF,IAAI,IAAI,CAAC,WAAW,CAAC,EAAE;IACrB,wCAAwC;IACxC,OAAO,CAAC,GAAG,CAAC,OAAO,CAAC,GAAG,CAAC,cAAc,CAAC,CAAC;IACxC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;CACjB;AAED,MAAM,OAAO,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC1B,MAAM,WAAW,GAAG,IAAI,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;AAEpC,uBAAuB;AACvB,IAAI,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,OAAO,EAAE;IAC9B,OAAO,CAAC,GAAG,CAAC,KAAK,CAAA;;;;;QAKX,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,IAAI,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC;;;;;;;;GAQ5C,CAAC,CAAC;IACH,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;CACjB;AAED,6CAA6C;AAC7C,IAAI,IAAI,CAAC,QAAQ,CAAC,EAAE;IAClB,WAAW,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;CAC5B;AAED,qBAAqB;AACrB,OAAO,CAAC,EAAE,CAAC,QAAQ,EAAE,GAAG,EAAE,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;AAC5C,OAAO,CAAC,EAAE,CAAC,SAAS,EAAE,GAAG,EAAE,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;AAE7C,QAAQ,CAAC,OAAO,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC","sourcesContent":["#!/usr/bin/env node\nimport arg from 'arg';\nimport chalk from 'chalk';\n\nexport type Command = (argv?: string[]) => void;\n\nconst commands: { [command: string]: () => Promise<Command> } = {\n  // Add a new command here\n  generateCodesigning: () =>\n    import('./generateCodesigning').then((i) => i.generateCodesigningAsync),\n};\n\nconst args = arg(\n  {\n    // Types\n    '--version': Boolean,\n    '--help': Boolean,\n\n    // Aliases\n    '-v': '--version',\n    '-h': '--help',\n  },\n  {\n    permissive: true,\n  }\n);\n\nif (args['--version']) {\n  // Version is added in the build script.\n  console.log(process.env.__EXPO_VERSION);\n  process.exit(0);\n}\n\nconst command = args._[0];\nconst commandArgs = args._.slice(1);\n\n// Handle `--help` flag\nif (args['--help'] || !command) {\n  console.log(chalk`\n    {bold Usage}\n      {bold $} npx expo <command>\n\n    {bold Available commands}\n      ${Object.keys(commands).sort().join(', ')}\n\n    {bold Options}\n      --version, -v   Version number\n      --help, -h      Displays this message\n\n    For more information run a command with the --help flag\n      {bold $} expo start --help\n  `);\n  process.exit(0);\n}\n\n// Push the help flag to the subcommand args.\nif (args['--help']) {\n  commandArgs.push('--help');\n}\n\n// Install exit hooks\nprocess.on('SIGINT', () => process.exit(0));\nprocess.on('SIGTERM', () => process.exit(0));\n\ncommands[command]().then((exec) => exec(commandArgs));\n"]}